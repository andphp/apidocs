<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创建用户赋Docker权限</title>
      <link href="2020/11/13/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E8%B5%8BDocker%E6%9D%83%E9%99%90/"/>
      <url>2020/11/13/%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E8%B5%8BDocker%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h3 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h3><ol><li>增加用户 useradd [username]</li><li>设置用户密码 passwd [username]</li><li>删除用户 userdel [username]</li><li>查看所有用户 cat /etc/passwd</li><li>查看当前活跃用户 w</li><li>查看简明用户列表 cat /etc/passwd|grep -v nologin|grep -v halt|grep -v shutdown|awk -F”:” ‘{ print $1”|”$3”|”$4 }’|more</li></ol><h3 id="用户组操作"><a href="#用户组操作" class="headerlink" title="用户组操作"></a>用户组操作</h3><ol><li>新建工作组 groupadd [groupname]</li><li>将用户添加进工作组 usermod -G [groupname] [username]</li><li>查看用户组 cat /etc/group</li></ol><h3 id="授权sudo权限，需要修改sudoers文件。"><a href="#授权sudo权限，需要修改sudoers文件。" class="headerlink" title="授权sudo权限，需要修改sudoers文件。"></a>授权sudo权限，需要修改sudoers文件。</h3><blockquote><p>首先找到文件位置，示例中文件在/etc/sudoers位置。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis sudoers</span><br></pre></td></tr></table></figure><blockquote><p>强调内容 修改文件权限，一般文件默认为只读。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;etc&#x2F;sudoers 查看文件权限</span><br><span class="line">chmod -v u+w &#x2F;etc&#x2F;sudoers 修改文件权限为可编辑</span><br></pre></td></tr></table></figure><blockquote><p>修改文件，在如下位置增加一行，保存退出。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sudoers 进入文件编辑器</span><br></pre></td></tr></table></figure><ul><li>文件内容改变如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root ALL&#x3D;(ALL) ALL 已有行</span><br><span class="line">username ALL&#x3D;(ALL) ALL 新增行</span><br></pre></td></tr></table></figure><blockquote><p>记得将文件权限还原回只读。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;etc&#x2F;sudoers 查看文件权限</span><br><span class="line">chmod -v u-w &#x2F;etc&#x2F;sudoers 修改文件权限为只读</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker-权限"><a href="#docker-权限" class="headerlink" title="docker 权限"></a>docker 权限</h3><blockquote><p>docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd docker     #添加docker用户组</span><br><span class="line">sudo gpasswd -a $USER docker     #将登陆用户加入到docker用户组中</span><br><span class="line">newgrp docker     #更新用户组</span><br><span class="line">docker ps    #测试docker命令是否可以使用sudo正常使用</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-CentOS7-升级内核的方法</title>
      <link href="2020/11/13/Linux-CentOS7-%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>2020/11/13/Linux-CentOS7-%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="查看操作系统内核版本"><a href="#查看操作系统内核版本" class="headerlink" title="查看操作系统内核版本"></a>查看操作系统内核版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h3 id="安装ELRepo到CentOS"><a href="#安装ELRepo到CentOS" class="headerlink" title="安装ELRepo到CentOS"></a>安装ELRepo到CentOS</h3><blockquote><p>最好从官方网站获取最新版本（官网地址：<a href="http://elrepo.org/tiki/tiki-index.php%EF%BC%89%EF%BC%8C%E4%B8%8B%E9%9D%A2%E4%B8%A4%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9B%B4%E6%8E%A5%E4%BB%8E%E5%AE%98%E7%BD%91%E4%B8%8A%E5%A4%8D%E5%88%B6%E6%9C%80%E6%96%B0%E7%89%88%E7%9A%84%E5%8D%B3%E5%8F%AF%E3%80%82">http://elrepo.org/tiki/tiki-index.php），下面两个命令直接从官网上复制最新版的即可。</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https:&#x2F;&#x2F;www.elrepo.org&#x2F;RPM-GPG-KEY-elrepo.org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install https:&#x2F;&#x2F;www.elrepo.org&#x2F;elrepo-release-7.0-3.el7.elrepo.noarch.rpm -y</span><br></pre></td></tr></table></figure><h3 id="添加-repository-后-列出可以使用的kernel包版本"><a href="#添加-repository-后-列出可以使用的kernel包版本" class="headerlink" title="添加 repository 后, 列出可以使用的kernel包版本"></a>添加 repository 后, 列出可以使用的kernel包版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --disablerepo&#x3D;&quot;*&quot; --enablerepo&#x3D;&quot;elrepo-kernel&quot; list available</span><br></pre></td></tr></table></figure><h3 id="安装需要的kernel版本，这里安装-kernel-lt"><a href="#安装需要的kernel版本，这里安装-kernel-lt" class="headerlink" title="安装需要的kernel版本，这里安装 kernel-lt"></a>安装需要的kernel版本，这里安装 kernel-lt</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo&#x3D;elrepo-kernel install kernel-lt -y</span><br></pre></td></tr></table></figure><blockquote><p>内核版本介绍：<br>lt:longterm的缩写：长期维护版；<br>ml:mainline的缩写：最新稳定版；</p></blockquote><h3 id="检查kernel启动顺序"><a href="#检查kernel启动顺序" class="headerlink" title="检查kernel启动顺序"></a>检查kernel启动顺序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</span><br></pre></td></tr></table></figure><blockquote><p>查看到刚才安装的kernel版本处在第一个位置，修改/etc/default/grub文件是系统在运行时自动执行最新的kernel</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;default&#x2F;grub</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRUB_DEFAULT&#x3D;0</span><br></pre></td></tr></table></figure><h3 id="重新创建kernel配置"><a href="#重新创建kernel配置" class="headerlink" title="重新创建kernel配置"></a>重新创建kernel配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grub2-mkconfig -o &#x2F;boot&#x2F;grub2&#x2F;grub.cfg</span><br></pre></td></tr></table></figure><h3 id="重新启动服务器使用最新kernel"><a href="#重新启动服务器使用最新kernel" class="headerlink" title="重新启动服务器使用最新kernel"></a>重新启动服务器使用最新kernel</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS环境配置安装Docker</title>
      <link href="2020/11/13/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85Docker/"/>
      <url>2020/11/13/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85Docker/</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS环境配置安装Docker"><a href="#CentOS环境配置安装Docker" class="headerlink" title="CentOS环境配置安装Docker"></a>CentOS环境配置安装Docker</h3><h4 id="查看升级系统内核"><a href="#查看升级系统内核" class="headerlink" title="查看升级系统内核"></a>查看升级系统内核</h4><blockquote><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p></blockquote><ul><li>通过 uname -r 命令查看你当前的内核版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h4 id="使用-root-权限登录-Centos。确保-yum-包更新到最新。"><a href="#使用-root-权限登录-Centos。确保-yum-包更新到最新。" class="headerlink" title="使用 root 权限登录 Centos。确保 yum 包更新到最新。"></a>使用 root 权限登录 Centos。确保 yum 包更新到最新。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br></pre></td></tr></table></figure><h4 id="卸载旧版本-如果安装过旧版本的话"><a href="#卸载旧版本-如果安装过旧版本的话" class="headerlink" title="卸载旧版本(如果安装过旧版本的话)"></a>卸载旧版本(如果安装过旧版本的话)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><h4 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h4><blockquote><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h4 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h4><blockquote><p>设置yum源【docker官方镜像源】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><blockquote><p>设置yum源【docker阿里镜像源】</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><blockquote><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;7&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p>由于repo中默认只开启stable仓库，故这里安装的是最新稳定版17.12.0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install &lt;FQPN&gt;  # 例如：sudo yum install docker-ce-17.12.0.ce</span><br></pre></td></tr></table></figure><blockquote><p>安装docker</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce -y</span><br></pre></td></tr></table></figure><h4 id="启动并加入开机启动"><a href="#启动并加入开机启动" class="headerlink" title="启动并加入开机启动"></a>启动并加入开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><blockquote><p>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>因为之前已经安装过旧版本的docker，在安装的时候报错如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Transaction check error:</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker-containerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;docker-containerd-shim from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br><span class="line">  file &#x2F;usr&#x2F;bin&#x2F;dockerd from install of docker-ce-17.12.0.ce-1.el7.centos.x86_64 conflicts with file from package docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure><blockquote><p>卸载旧版本的包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum erase docker-common-2:1.12.6-68.gitec8512b.el7.centos.x86_64</span><br></pre></td></tr></table></figure><blockquote><p>再次安装docker</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><blockquote><p>安装epel源.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><blockquote><p>安装docker-compose</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP从入门到放弃</title>
      <link href="2020/11/13/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%20PHP%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
      <url>2020/11/13/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%20PHP%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
      
        <content type="html"><![CDATA[<h4 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h4><ul><li><p>出处</p><p>”php是世界上最好的语言“这句话，最早出现在2001年7月的PHP文档中。</p><p>而在这之后不久，我们就可以看到更激进的言论了，Because PHP is the best language ever, ever. It’s fast, very powerful, and free.因为PHP是有史以来最好的语言，没有之一。它快速，非常强大，而且免费。</p></li></ul><p>当然php本身确实足够优秀。</p><p><img src="/img/post/2020-11-13/php.jpg"></p><ul><li><p>争论</p><p>争论于是乎在网络的各个地方，语言好坏之争炒出了新高度，再安静的论坛，只要一句”php是世界上最好的语言“就能吵半天的。</p></li><li><p>讲个段子</p><p>某女：你能让这个论坛的人都吵起来，我今晚就跟你走。</p><p>某软件工程师：PHP是最好的语言！</p><p>某论坛真的就炸锅了，各种吵架……</p><p>某女：服了你了，我们走吧，你想干啥都行。</p><p>某软件工程师：今天不行，我一定要说服他们，PHP必须是最好的语言…</p></li><li><p>总结</p><p>这是个情怀的问题，但是不止是情怀的问题；从这个角度来回答，那么任何东西只要能够满足你情怀就是最好的，所以如果php能够支撑起你的梦想，用php能够解决你工作当中遇到的问题，让你能够生活下去，那么它就是最好的语言。</p><p>但是语言只是一个解决问题的工具，不能仅局限于使用某种语言，拥抱开放，才能看的更远，多掌握一种工具，在面对问题的时候就会多一种解决方案，人生永远不要给自己设限。</p><p>php历经多年依然很棒，在web开发领域，依然被广泛使用，也将被长期使用，至少目前没有后来者居上的情况发生。但对每个phper来说，立足当下，着眼未来才是关键，不要固步自封，学会开放的胸怀去面对，走出自己的舒适区，再学至少一门编程语言吧。只有在学习中我们才能进步，这一点其实php本身就在慢慢的改变，只要你有心去注意，你会发现，你所用的几个流行的php开发框架越来越多的在借鉴java的开发思想。php本身都在不断的学习进步，作为一个phper，我们有什么理由原地踏步呢？</p></li></ul><hr><h4 id="给传统PHP插上翅膀的现代PHP扩展-SWOOLE"><a href="#给传统PHP插上翅膀的现代PHP扩展-SWOOLE" class="headerlink" title="给传统PHP插上翅膀的现代PHP扩展 SWOOLE"></a>给传统PHP插上翅膀的现代PHP扩展 SWOOLE</h4><p><img src="/img/post/2020-11-13/swoole.jpg"></p><ul><li><p>Swore : 让PHP无所不能</p><p>Swoole 使 PHP 开发人员可以编写高性能高并发的 TCP、UDP、Unix Socket、HTTP、 WebSocket 等服务，让 PHP 不再局限于 Web 领域。Swoole4 协程的成熟将 PHP 带入了前所未有的时期， 为性能的提升提供了独一无二的可能性。Swoole 可以广泛应用于互联网、移动通信、云计算、 网络游戏、物联网（IOT）、车联网、智能家居等领域。使用 PHP + Swoole 可以使企业 IT 研发团队的效率大大提升，更加专注于开发创新产品。</p></li></ul><hr><h4 id="如何从PHP过渡到Go-golang"><a href="#如何从PHP过渡到Go-golang" class="headerlink" title="如何从PHP过渡到Go(golang)"></a>如何从PHP过渡到Go(golang)</h4><ul><li><p>Go语言的前世今生</p><p>Go 语言起源 2007 年，并于 2009 年正式对外发布。它从 2009 年 9 月 21 日开始作为谷歌公司 20% 兼职项目，即相关员工利用 20% 的空余时间来参与 Go 语言的研发工作。</p><p>2012年正式发布。</p></li><li><p>Go语言的特性和优势</p><p>go是21世纪的C语言，也是云计算时代的C语言，它的诞生是为了有更高的开发效率。</p><p><strong>go的最大优势就是执行速度和开发效率都很出色，而且从语言级别上支持并发。执行速度快是因为go是编译型的静态语言，它在执行速度上比解释型语言具有先天的优势。生产效率高是基于go的语法和结构简明，易学易用。</strong></p></li></ul><p><img src="/img/post/2020-11-13/golang.jpg"></p><hr><h3 id="博客内容分享既定技术方向和目标"><a href="#博客内容分享既定技术方向和目标" class="headerlink" title="博客内容分享既定技术方向和目标"></a>博客内容分享既定技术方向和目标</h3><ol><li>主要 围绕 PHP和GOLANG 语言在 web 应用中涉及到的 环境搭建 、技术选型及案例分析 展开博客日志记录分享。</li><li>包括但不限于 对 时下 web应用 周边语言、应用或框架、动态新闻 进行跟踪学习分享</li></ol><ul><li><p>Git</p><p>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。 [1] Git 是 [Linus Torvalds] 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p></li><li><p>Docker</p><p>Docker是一个开放源代码软件项目，让应用程序部署在软件货柜下的工作可以自动化进行，借此在Linux操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p></li><li><p>Vue.js</p><p>Vue.js是一套构建用户界面的渐进式框架，Vue 采用自下向上增量开发的设计，其核心库只关注视图层，易于上手，同时vue完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> GOLANG </tag>
            
            <tag> ANDPHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
